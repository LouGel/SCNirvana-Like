{
  "version": "3.4",
  "log": [
    {
      "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.12"
      },
      "@openzeppelin/contracts/access/IAccessControlEnumerable.sol:IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/IAccessControlEnumerable.sol:11",
        "inherit": [
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.12"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.12"
      },
      "@openzeppelin/contracts/finance/PaymentSplitter.sol:PaymentSplitter": {
        "src": "@openzeppelin/contracts/finance/PaymentSplitter.sol:28",
        "version": {
          "withMetadata": "79b5889280eb39689ba0d04c8c777212faff99b11af033c06230b028c046324a",
          "withoutMetadata": "249d4228a4e5810a23f2a8ad3a3390f5aa71deb02b399c45e6ceae962b9f1bec",
          "linkedWithoutMetadata": "249d4228a4e5810a23f2a8ad3a3390f5aa71deb02b399c45e6ceae962b9f1bec"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "(address[],uint256[])",
          "()",
          "totalShares()",
          "totalReleased()",
          "totalReleased(address)",
          "shares(address)",
          "released(address)",
          "released(address,address)",
          "payee(uint256)",
          "releasable(address)",
          "releasable(address,address)",
          "release(address payable)",
          "release(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PaymentSplitter",
            "src": "@openzeppelin/contracts/finance/PaymentSplitter.sol:51"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_totalShares",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "PaymentSplitter",
              "src": "@openzeppelin/contracts/finance/PaymentSplitter.sol:34"
            },
            {
              "label": "_totalReleased",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "PaymentSplitter",
              "src": "@openzeppelin/contracts/finance/PaymentSplitter.sol:35"
            },
            {
              "label": "_shares",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "PaymentSplitter",
              "src": "@openzeppelin/contracts/finance/PaymentSplitter.sol:37"
            },
            {
              "label": "_released",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "PaymentSplitter",
              "src": "@openzeppelin/contracts/finance/PaymentSplitter.sol:38"
            },
            {
              "label": "_payees",
              "offset": 0,
              "slot": "4",
              "type": "t_array(t_address)dyn_storage",
              "contract": "PaymentSplitter",
              "src": "@openzeppelin/contracts/finance/PaymentSplitter.sol:39"
            },
            {
              "label": "_erc20TotalReleased",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_contract(IERC20)761,t_uint256)",
              "contract": "PaymentSplitter",
              "src": "@openzeppelin/contracts/finance/PaymentSplitter.sol:41"
            },
            {
              "label": "_erc20Released",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_contract(IERC20)761,t_mapping(t_address,t_uint256))",
              "contract": "PaymentSplitter",
              "src": "@openzeppelin/contracts/finance/PaymentSplitter.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)761": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(IERC20)761,t_mapping(t_address,t_uint256))": {
              "label": "mapping(contract IERC20 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(IERC20)761,t_uint256)": {
              "label": "mapping(contract IERC20 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.12"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.12"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.12"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.12"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "1fc38cdf5aefd7f74a73a4bb6380d67f70315d3a1eada246b549504b21cf6e43",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.12"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b36f4597081cbb45687f263ba8079e37cf9650e6affdca2305d55c7323916202",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.12"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.12"
      },
      "contracts/Wallet.sol:teamContract": {
        "src": "contracts/Wallet.sol:8",
        "version": {
          "withMetadata": "9ecf142012abad68c92e96d6f6044d44433bb8b00a1edd107e1d2ffbc1cf8fa0",
          "withoutMetadata": "fcfc123d9beb404f0b935f5374855a5f4a8b51ca99ea879743c547b6538f2dd4",
          "linkedWithoutMetadata": "fcfc123d9beb404f0b935f5374855a5f4a8b51ca99ea879743c547b6538f2dd4"
        },
        "inherit": [
          "@openzeppelin/contracts/finance/PaymentSplitter.sol:PaymentSplitter",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address[],uint256[],address,address,address,address)",
          "setMarket(address)",
          "release(address,address)",
          "release(address payable)",
          "releaseAllEth()",
          "releaseAllErc20(address)",
          "releaseAllUsdc()",
          "realize()",
          "sell()",
          "buy()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "teamContract",
            "src": "contracts/Wallet.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "teamLength",
            "src": "contracts/Wallet.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_totalShares",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "PaymentSplitter",
              "src": "@openzeppelin/contracts/finance/PaymentSplitter.sol:34"
            },
            {
              "label": "_totalReleased",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "PaymentSplitter",
              "src": "@openzeppelin/contracts/finance/PaymentSplitter.sol:35"
            },
            {
              "label": "_shares",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "PaymentSplitter",
              "src": "@openzeppelin/contracts/finance/PaymentSplitter.sol:37"
            },
            {
              "label": "_released",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "PaymentSplitter",
              "src": "@openzeppelin/contracts/finance/PaymentSplitter.sol:38"
            },
            {
              "label": "_payees",
              "offset": 0,
              "slot": "4",
              "type": "t_array(t_address)dyn_storage",
              "contract": "PaymentSplitter",
              "src": "@openzeppelin/contracts/finance/PaymentSplitter.sol:39"
            },
            {
              "label": "_erc20TotalReleased",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_contract(IERC20)761,t_uint256)",
              "contract": "PaymentSplitter",
              "src": "@openzeppelin/contracts/finance/PaymentSplitter.sol:41"
            },
            {
              "label": "_erc20Released",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_contract(IERC20)761,t_mapping(t_address,t_uint256))",
              "contract": "PaymentSplitter",
              "src": "@openzeppelin/contracts/finance/PaymentSplitter.sol:42"
            },
            {
              "label": "dsd",
              "offset": 0,
              "slot": "7",
              "type": "t_contract(IERC20)761",
              "contract": "teamContract",
              "src": "contracts/Wallet.sol:12"
            },
            {
              "label": "labs",
              "offset": 0,
              "slot": "8",
              "type": "t_contract(IERC20)761",
              "contract": "teamContract",
              "src": "contracts/Wallet.sol:13"
            },
            {
              "label": "prLabs",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IERC20)761",
              "contract": "teamContract",
              "src": "contracts/Wallet.sol:14"
            },
            {
              "label": "usdc",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(IERC20)761",
              "contract": "teamContract",
              "src": "contracts/Wallet.sol:15"
            },
            {
              "label": "market",
              "offset": 0,
              "slot": "11",
              "type": "t_address",
              "contract": "teamContract",
              "src": "contracts/Wallet.sol:16"
            },
            {
              "label": "isTeam",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "teamContract",
              "src": "contracts/Wallet.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)761": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(IERC20)761,t_mapping(t_address,t_uint256))": {
              "label": "mapping(contract IERC20 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(IERC20)761,t_uint256)": {
              "label": "mapping(contract IERC20 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.12"
      },
      "contracts/interfaces/IBank.sol:IBank": {
        "src": "contracts/interfaces/IBank.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "DSD()",
          "market()",
          "pool()",
          "helper()",
          "debt(address)",
          "dev()",
          "borrowFee()",
          "constructor1(address,address,address,address,address)",
          "setOptions(address,uint32)",
          "withdrawable(address)",
          "withdrawable(address,uint256)",
          "available(address)",
          "borrow(uint256)",
          "borrowFrom(address,uint256)",
          "repay(uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.12"
      },
      "contracts/interfaces/IERC20BurnableMinter.sol:IERC20BurnableMinter": {
        "src": "contracts/interfaces/IERC20BurnableMinter.sol:7",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.12"
      },
      "contracts/interfaces/IMarket.sol:IMarket": {
        "src": "contracts/interfaces/IMarket.sol:9",
        "inherit": [
          "@openzeppelin/contracts/access/IAccessControlEnumerable.sol:IAccessControlEnumerable",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "totalVolume()",
          "paused()",
          "Lab()",
          "prLab()",
          "pool()",
          "target()",
          "targetAdjusted()",
          "minTarget()",
          "maxTargetAdjusted()",
          "raiseStep()",
          "lowerStep()",
          "lowerInterval()",
          "latestUpdateTimestamp()",
          "dev()",
          "buyFee()",
          "sellFee()",
          "k()",
          "c()",
          "f()",
          "p()",
          "w()",
          "stablecoinsDecimals(address)",
          "startup(address,uint256,uint256)",
          "stablecoinsCanBuyLength()",
          "stablecoinsCanBuyAt(uint256)",
          "stablecoinsCanBuyContains(address)",
          "stablecoinsCanSellLength()",
          "stablecoinsCanSellAt(uint256)",
          "stablecoinsCanSellContains(address)",
          "currentFundingRatio()",
          "estimateAdjust(uint256,uint256,uint256,uint256)",
          "estimateRaisePrice()",
          "estimateRaisePrice(uint256,uint256,uint256,uint256,uint256)",
          "lowerAndAdjust()",
          "setMarketOptions(uint256,uint32,uint32)",
          "setAdjustOptions(uint32,uint32,uint32,uint32,uint32)",
          "setFeeOptions(address,uint32,uint32)",
          "manageStablecoins(address,bool,bool)",
          "estimateBuy(address,uint256)",
          "estimateRealize(uint256,address)",
          "estimateSell(uint256,address)",
          "buy(address,uint256,uint256)",
          "buyFor(address,uint256,uint256,address)",
          "realize(uint256,address,uint256)",
          "realizeFor(uint256,address,uint256,address)",
          "sell(uint256,address,uint256)",
          "sellFor(uint256,address,uint256,address)",
          "burn(uint256)",
          "burnFor(uint256,address)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.12"
      },
      "contracts/interfaces/IStakePool.sol:IStakePool": {
        "src": "contracts/interfaces/IStakePool.sol:36",
        "inherit": [],
        "libraries": [],
        "methods": [
          "Lab()",
          "prLab()",
          "bank()",
          "poolInfo(uint256)",
          "userInfo(uint256,address)",
          "totalAllocPoint()",
          "mintPercentPerDay()",
          "blocksPerDay()",
          "dev()",
          "withdrawFee()",
          "mintFee()",
          "constructor1(address,address,address,address)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setOptions(uint32,uint256,address,uint32,uint32,bool)",
          "pendingRewards(uint256,address)",
          "massUpdatePools()",
          "deposit(uint256,uint256)",
          "depositFor(uint256,uint256,address)",
          "withdraw(uint256,uint256)",
          "claim(uint256)",
          "claimFor(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.12"
      }
    },
    {
      "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.12"
      },
      "@openzeppelin/contracts/access/IAccessControlEnumerable.sol:IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/IAccessControlEnumerable.sol:11",
        "inherit": [
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.12"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.12"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.12"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.12"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.12"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "1fc38cdf5aefd7f74a73a4bb6380d67f70315d3a1eada246b549504b21cf6e43",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.12"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b36f4597081cbb45687f263ba8079e37cf9650e6affdca2305d55c7323916202",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.12"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.12"
      },
      "contracts/StakePool.sol:StakePool": {
        "src": "contracts/StakePool.sol:14",
        "version": {
          "withMetadata": "247a738c9e639202a36e25dfa7f9270e3464b82a49b31a9cb558c1accbc5b196",
          "withoutMetadata": "140c02bfeeaa0fe2539f7dbc2b84c98731921d4b5bc8f5bc53b2fde50c64df2d",
          "linkedWithoutMetadata": "140c02bfeeaa0fe2539f7dbc2b84c98731921d4b5bc8f5bc53b2fde50c64df2d"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "(address,address)",
          "setBank(address)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setOptions(uint32,uint256,address,uint32,uint32,bool)",
          "pendingRewards(uint256,address)",
          "massUpdatePools()",
          "deposit(uint256,uint256)",
          "depositFor(uint256,uint256,address)",
          "withdraw(uint256,uint256)",
          "claim(uint256)",
          "claimFor(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StakePool",
            "src": "contracts/StakePool.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bankSet",
            "src": "contracts/StakePool.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalAllocPoint",
            "src": "contracts/StakePool.sol:29"
          },
          {
            "kind": "state-variable-assignment",
            "name": "mintPercentPerDay",
            "src": "contracts/StakePool.sol:32"
          },
          {
            "kind": "state-variable-assignment",
            "name": "blocksPerDay",
            "src": "contracts/StakePool.sol:34"
          },
          {
            "kind": "state-variable-assignment",
            "name": "withdrawFee",
            "src": "contracts/StakePool.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "mintFee",
            "src": "contracts/StakePool.sol:41"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "bankSet",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "StakePool",
              "src": "contracts/StakePool.sol:17"
            },
            {
              "label": "Lab",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IERC20)288",
              "contract": "StakePool",
              "src": "contracts/StakePool.sol:19"
            },
            {
              "label": "prLab",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(IERC20BurnableMinter)2106",
              "contract": "StakePool",
              "src": "contracts/StakePool.sol:21"
            },
            {
              "label": "bank",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(IBank)2081",
              "contract": "StakePool",
              "src": "contracts/StakePool.sol:23"
            },
            {
              "label": "poolInfo",
              "offset": 0,
              "slot": "4",
              "type": "t_array(t_struct(PoolInfo)2564_storage)dyn_storage",
              "contract": "StakePool",
              "src": "contracts/StakePool.sol:25"
            },
            {
              "label": "userInfo",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)2569_storage))",
              "contract": "StakePool",
              "src": "contracts/StakePool.sol:27"
            },
            {
              "label": "totalAllocPoint",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "StakePool",
              "src": "contracts/StakePool.sol:29"
            },
            {
              "label": "mintPercentPerDay",
              "offset": 0,
              "slot": "7",
              "type": "t_uint32",
              "contract": "StakePool",
              "src": "contracts/StakePool.sol:32"
            },
            {
              "label": "blocksPerDay",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "StakePool",
              "src": "contracts/StakePool.sol:34"
            },
            {
              "label": "dev",
              "offset": 0,
              "slot": "9",
              "type": "t_address",
              "contract": "StakePool",
              "src": "contracts/StakePool.sol:37"
            },
            {
              "label": "withdrawFee",
              "offset": 20,
              "slot": "9",
              "type": "t_uint32",
              "contract": "StakePool",
              "src": "contracts/StakePool.sol:39"
            },
            {
              "label": "mintFee",
              "offset": 24,
              "slot": "9",
              "type": "t_uint32",
              "contract": "StakePool",
              "src": "contracts/StakePool.sol:41"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(PoolInfo)2564_storage)dyn_storage": {
              "label": "struct PoolInfo[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IBank)2081": {
              "label": "contract IBank",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)288": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20BurnableMinter)2106": {
              "label": "contract IERC20BurnableMinter",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_struct(UserInfo)2569_storage)": {
              "label": "mapping(address => struct UserInfo)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)2569_storage))": {
              "label": "mapping(uint256 => mapping(address => struct UserInfo))",
              "numberOfBytes": "32"
            },
            "t_struct(PoolInfo)2564_storage": {
              "label": "struct PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)288",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "accPerShare",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(UserInfo)2569_storage": {
              "label": "struct UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.12"
      },
      "contracts/interfaces/IBank.sol:IBank": {
        "src": "contracts/interfaces/IBank.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "DSD()",
          "market()",
          "pool()",
          "helper()",
          "debt(address)",
          "dev()",
          "borrowFee()",
          "constructor1(address,address,address,address,address)",
          "setOptions(address,uint32)",
          "withdrawable(address)",
          "withdrawable(address,uint256)",
          "available(address)",
          "borrow(uint256)",
          "borrowFrom(address,uint256)",
          "repay(uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.12"
      },
      "contracts/interfaces/IERC20BurnableMinter.sol:IERC20BurnableMinter": {
        "src": "contracts/interfaces/IERC20BurnableMinter.sol:7",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.12"
      },
      "contracts/interfaces/IMarket.sol:IMarket": {
        "src": "contracts/interfaces/IMarket.sol:9",
        "inherit": [
          "@openzeppelin/contracts/access/IAccessControlEnumerable.sol:IAccessControlEnumerable",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "totalVolume()",
          "paused()",
          "Lab()",
          "prLab()",
          "pool()",
          "target()",
          "targetAdjusted()",
          "minTarget()",
          "maxTargetAdjusted()",
          "raiseStep()",
          "lowerStep()",
          "lowerInterval()",
          "latestUpdateTimestamp()",
          "dev()",
          "buyFee()",
          "sellFee()",
          "k()",
          "c()",
          "f()",
          "p()",
          "w()",
          "stablecoinsDecimals(address)",
          "startup(address,uint256,uint256)",
          "stablecoinsCanBuyLength()",
          "stablecoinsCanBuyAt(uint256)",
          "stablecoinsCanBuyContains(address)",
          "stablecoinsCanSellLength()",
          "stablecoinsCanSellAt(uint256)",
          "stablecoinsCanSellContains(address)",
          "currentFundingRatio()",
          "estimateAdjust(uint256,uint256,uint256,uint256)",
          "estimateRaisePrice()",
          "estimateRaisePrice(uint256,uint256,uint256,uint256,uint256)",
          "lowerAndAdjust()",
          "setMarketOptions(uint256,uint32,uint32)",
          "setAdjustOptions(uint32,uint32,uint32,uint32,uint32)",
          "setFeeOptions(address,uint32,uint32)",
          "manageStablecoins(address,bool,bool)",
          "estimateBuy(address,uint256)",
          "estimateRealize(uint256,address)",
          "estimateSell(uint256,address)",
          "buy(address,uint256,uint256)",
          "buyFor(address,uint256,uint256,address)",
          "realize(uint256,address,uint256)",
          "realizeFor(uint256,address,uint256,address)",
          "sell(uint256,address,uint256)",
          "sellFor(uint256,address,uint256,address)",
          "burn(uint256)",
          "burnFor(uint256,address)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.12"
      },
      "contracts/interfaces/IStakePool.sol:IStakePool": {
        "src": "contracts/interfaces/IStakePool.sol:36",
        "inherit": [],
        "libraries": [],
        "methods": [
          "Lab()",
          "prLab()",
          "bank()",
          "poolInfo(uint256)",
          "userInfo(uint256,address)",
          "totalAllocPoint()",
          "mintPercentPerDay()",
          "blocksPerDay()",
          "dev()",
          "withdrawFee()",
          "mintFee()",
          "constructor1(address,address,address,address)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setOptions(uint32,uint256,address,uint32,uint32,bool)",
          "pendingRewards(uint256,address)",
          "massUpdatePools()",
          "deposit(uint256,uint256)",
          "depositFor(uint256,uint256,address)",
          "withdraw(uint256,uint256)",
          "claim(uint256)",
          "claimFor(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.12"
      }
    },
    {
      "@openzeppelin/contracts/access/AccessControl.sol:AccessControl": {
        "src": "@openzeppelin/contracts/access/AccessControl.sol:49",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.12"
      },
      "@openzeppelin/contracts/access/AccessControlEnumerable.sol:AccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:13",
        "inherit": [
          "@openzeppelin/contracts/access/AccessControl.sol:AccessControl",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControlEnumerable.sol:IAccessControlEnumerable",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            },
            {
              "label": "_roleMembers",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)4047_storage)",
              "contract": "AccessControlEnumerable",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(AddressSet)4047_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)4047_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)3732_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)3732_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.12"
      },
      "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "@openzeppelin/contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.12"
      },
      "@openzeppelin/contracts/access/IAccessControlEnumerable.sol:IAccessControlEnumerable": {
        "src": "@openzeppelin/contracts/access/IAccessControlEnumerable.sol:11",
        "inherit": [
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "getRoleMember(bytes32,uint256)",
          "getRoleMemberCount(bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.12"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.12"
      },
      "@openzeppelin/contracts/finance/PaymentSplitter.sol:PaymentSplitter": {
        "src": "@openzeppelin/contracts/finance/PaymentSplitter.sol:28",
        "version": {
          "withMetadata": "79b5889280eb39689ba0d04c8c777212faff99b11af033c06230b028c046324a",
          "withoutMetadata": "249d4228a4e5810a23f2a8ad3a3390f5aa71deb02b399c45e6ceae962b9f1bec",
          "linkedWithoutMetadata": "249d4228a4e5810a23f2a8ad3a3390f5aa71deb02b399c45e6ceae962b9f1bec"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address",
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "(address[],uint256[])",
          "()",
          "totalShares()",
          "totalReleased()",
          "totalReleased(address)",
          "shares(address)",
          "released(address)",
          "released(address,address)",
          "payee(uint256)",
          "releasable(address)",
          "releasable(address,address)",
          "release(address payable)",
          "release(address,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "PaymentSplitter",
            "src": "@openzeppelin/contracts/finance/PaymentSplitter.sol:51"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_totalShares",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "PaymentSplitter",
              "src": "@openzeppelin/contracts/finance/PaymentSplitter.sol:34"
            },
            {
              "label": "_totalReleased",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "PaymentSplitter",
              "src": "@openzeppelin/contracts/finance/PaymentSplitter.sol:35"
            },
            {
              "label": "_shares",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "PaymentSplitter",
              "src": "@openzeppelin/contracts/finance/PaymentSplitter.sol:37"
            },
            {
              "label": "_released",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "PaymentSplitter",
              "src": "@openzeppelin/contracts/finance/PaymentSplitter.sol:38"
            },
            {
              "label": "_payees",
              "offset": 0,
              "slot": "4",
              "type": "t_array(t_address)dyn_storage",
              "contract": "PaymentSplitter",
              "src": "@openzeppelin/contracts/finance/PaymentSplitter.sol:39"
            },
            {
              "label": "_erc20TotalReleased",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_contract(IERC20)1951,t_uint256)",
              "contract": "PaymentSplitter",
              "src": "@openzeppelin/contracts/finance/PaymentSplitter.sol:41"
            },
            {
              "label": "_erc20Released",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_contract(IERC20)1951,t_mapping(t_address,t_uint256))",
              "contract": "PaymentSplitter",
              "src": "@openzeppelin/contracts/finance/PaymentSplitter.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20)1951": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(IERC20)1951,t_mapping(t_address,t_uint256))": {
              "label": "mapping(contract IERC20 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(IERC20)1951,t_uint256)": {
              "label": "mapping(contract IERC20 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.12"
      },
      "@openzeppelin/contracts/security/Pausable.sol:Pausable": {
        "src": "@openzeppelin/contracts/security/Pausable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Pausable",
            "src": "@openzeppelin/contracts/security/Pausable.sol:33"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_paused",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.12"
      },
      "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.12"
      },
      "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "731092cfdd9c29c8f84299e0b50824940b0eff4348416f1db2b04299143c2b2f",
          "withoutMetadata": "4d25d45e78727bcafc703bbb4907285a61f036774fab03605769f9bf1ded7566",
          "linkedWithoutMetadata": "4d25d45e78727bcafc703bbb4907285a61f036774fab03605769f9bf1ded7566"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.12"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.12"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.12"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:IERC20Permit": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.12"
      },
      "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:19",
        "version": {
          "withMetadata": "1fc38cdf5aefd7f74a73a4bb6380d67f70315d3a1eada246b549504b21cf6e43",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Address.sol:Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.12"
      },
      "@openzeppelin/contracts/utils/Address.sol:Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "b36f4597081cbb45687f263ba8079e37cf9650e6affdca2305d55c7323916202",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.12"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.12"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:11",
        "version": {
          "withMetadata": "fbf3135c9d6d9a214ba20d05bdbfb0727f8ac29e6452cbe78e581bcda3e4c300",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.12"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.12"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.12"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "e8039e572ded3bae5eb5965a28cfacd22ab476f9ea56a2e5b0ba10d08e141964",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.12"
      },
      "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet": {
        "src": "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:41",
        "version": {
          "withMetadata": "b11de36a534350855d1824efce2b8c8c7b48c4d56e287e933b86f52216c7a9f1",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.12"
      },
      "contracts/Bank.sol:Bank": {
        "src": "contracts/Bank.sol:15",
        "version": {
          "withMetadata": "46ce197dc65e13ed20308dcf1647e0e03fd85b5fdf49c6e21a09fa3da373c2f6",
          "withoutMetadata": "24576ad512ea82ff5d8890606c6ed5b1e39394ce9fded59f7e1ee55cf5ea9921",
          "linkedWithoutMetadata": "24576ad512ea82ff5d8890606c6ed5b1e39394ce9fded59f7e1ee55cf5ea9921"
        },
        "inherit": [
          "@openzeppelin/contracts/security/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address,address,address)",
          "setMarketAndHelper(address,address)",
          "setOptions(address,uint32)",
          "withdrawable(address)",
          "withdrawable(address,uint256)",
          "available(address)",
          "borrow(uint256)",
          "borrowFrom(address,uint256)",
          "repay(uint256)",
          "repayWithUsdc(uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Bank",
            "src": "contracts/Bank.sol:54"
          },
          {
            "kind": "state-variable-assignment",
            "name": "marketAndHelperSet",
            "src": "contracts/Bank.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "DSD",
            "src": "contracts/Bank.sol:18"
          },
          {
            "kind": "state-variable-immutable",
            "name": "USDC",
            "src": "contracts/Bank.sol:20"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_paused",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            },
            {
              "label": "marketAndHelperSet",
              "offset": 21,
              "slot": "0",
              "type": "t_bool",
              "contract": "Bank",
              "src": "contracts/Bank.sol:16"
            },
            {
              "label": "market",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IMarket)12156",
              "contract": "Bank",
              "src": "contracts/Bank.sol:22"
            },
            {
              "label": "pool",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(IStakePool)12350",
              "contract": "Bank",
              "src": "contracts/Bank.sol:24"
            },
            {
              "label": "helper",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "Bank",
              "src": "contracts/Bank.sol:26"
            },
            {
              "label": "debt",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "Bank",
              "src": "contracts/Bank.sol:29"
            },
            {
              "label": "dev",
              "offset": 0,
              "slot": "5",
              "type": "t_address",
              "contract": "Bank",
              "src": "contracts/Bank.sol:32"
            },
            {
              "label": "borrowFee",
              "offset": 20,
              "slot": "5",
              "type": "t_uint32",
              "contract": "Bank",
              "src": "contracts/Bank.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IMarket)12156": {
              "label": "contract IMarket",
              "numberOfBytes": "20"
            },
            "t_contract(IStakePool)12350": {
              "label": "contract IStakePool",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.12"
      },
      "contracts/BuyBack.sol:BuyBack": {
        "src": "contracts/BuyBack.sol:13",
        "version": {
          "withMetadata": "768de9b95277564d6848d15736dc6254a9817e9161b4b4aefe55f099f74e19c4",
          "withoutMetadata": "e5707696974acf35e65e94a819728028dc86a49237d8a7e933d22f835b253422",
          "linkedWithoutMetadata": "e5707696974acf35e65e94a819728028dc86a49237d8a7e933d22f835b253422"
        },
        "inherit": [
          "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(uint256,uint256,address,address)",
          "setMarket(address)",
          "mixTime(string)",
          "isOpenned()",
          "selllab(uint256)",
          "getStables(uint256)",
          "burnRest(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "BuyBack",
            "src": "contracts/BuyBack.sol:22"
          },
          {
            "kind": "state-variable-immutable",
            "name": "dayOfWithdraw",
            "src": "contracts/BuyBack.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "usdc",
            "src": "contracts/BuyBack.sol:18"
          },
          {
            "kind": "state-variable-immutable",
            "name": "labs",
            "src": "contracts/BuyBack.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "dayOfBuyBack",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "BuyBack",
              "src": "contracts/BuyBack.sol:14"
            },
            {
              "label": "hashTimeInTheDay",
              "offset": 0,
              "slot": "3",
              "type": "t_bytes32",
              "contract": "BuyBack",
              "src": "contracts/BuyBack.sol:16"
            },
            {
              "label": "market",
              "offset": 0,
              "slot": "4",
              "type": "t_address",
              "contract": "BuyBack",
              "src": "contracts/BuyBack.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.12"
      },
      "contracts/Contract.sol:Contract": {
        "src": "contracts/Contract.sol:4",
        "version": {
          "withMetadata": "279768a2794273b3c33de850266266706b4d6d811d2cef278728aa477784ba37",
          "withoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b",
          "linkedWithoutMetadata": "ac0db523ddc3e330f735df7b3b0b24460531c71290a891170e840f8f67d5ff6b"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.12"
      },
      "contracts/GLA.sol:GenesisLaunchAuction": {
        "src": "contracts/GLA.sol:12",
        "version": {
          "withMetadata": "37bf39d18596fcf4dd0c71d288058fa32988a9f0d3a450782276a7322ce19eb5",
          "withoutMetadata": "f372da6729d0aeed6ddb77cf32885378a04fce2931ebd41022c8a409350b1dbd",
          "linkedWithoutMetadata": "f372da6729d0aeed6ddb77cf32885378a04fce2931ebd41022c8a409350b1dbd"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "(address,address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
          "totalSupply()",
          "totalCap()",
          "getPublicOfferingPrice()",
          "getTotalSupply()",
          "getPhase()",
          "publicOfferingBuy(uint256)",
          "initialize()",
          "estimateClaim(address)",
          "claim()",
          "estimateWithdraw(address)",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GenesisLaunchAuction",
            "src": "contracts/GLA.sol:88"
          },
          {
            "kind": "state-variable-assignment",
            "name": "initialized",
            "src": "contracts/GLA.sol:25"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "publicOfferingEnabledAt",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "GenesisLaunchAuction",
              "src": "contracts/GLA.sol:17"
            },
            {
              "label": "initAt",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "GenesisLaunchAuction",
              "src": "contracts/GLA.sol:20"
            },
            {
              "label": "unlockAt",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "GenesisLaunchAuction",
              "src": "contracts/GLA.sol:23"
            },
            {
              "label": "initialized",
              "offset": 0,
              "slot": "4",
              "type": "t_bool",
              "contract": "GenesisLaunchAuction",
              "src": "contracts/GLA.sol:25"
            },
            {
              "label": "publicOfferingPrice",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256",
              "contract": "GenesisLaunchAuction",
              "src": "contracts/GLA.sol:28"
            },
            {
              "label": "softCap",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "GenesisLaunchAuction",
              "src": "contracts/GLA.sol:31"
            },
            {
              "label": "hardCap",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "GenesisLaunchAuction",
              "src": "contracts/GLA.sol:34"
            },
            {
              "label": "Lab",
              "offset": 0,
              "slot": "8",
              "type": "t_contract(IERC20)1951",
              "contract": "GenesisLaunchAuction",
              "src": "contracts/GLA.sol:37"
            },
            {
              "label": "USDC",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IERC20)1951",
              "contract": "GenesisLaunchAuction",
              "src": "contracts/GLA.sol:39"
            },
            {
              "label": "market",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(IMarket)12156",
              "contract": "GenesisLaunchAuction",
              "src": "contracts/GLA.sol:41"
            },
            {
              "label": "publicOfferingTotalShares",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "GenesisLaunchAuction",
              "src": "contracts/GLA.sol:44"
            },
            {
              "label": "publicOfferingSharesOf",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "GenesisLaunchAuction",
              "src": "contracts/GLA.sol:46"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)1951": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IMarket)12156": {
              "label": "contract IMarket",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.12"
      },
      "contracts/Helper.sol:Helper": {
        "src": "contracts/Helper.sol:13",
        "version": {
          "withMetadata": "7e8d08321c9eb0b047a685ba21bde35333bf4b9cdcacb401e54d10665767d226",
          "withoutMetadata": "7819cced4108876b63775ea49241cacf2928d02cdde5fd306ebfa8f139e63ad2",
          "linkedWithoutMetadata": "7819cced4108876b63775ea49241cacf2928d02cdde5fd306ebfa8f139e63ad2"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "(address,address,address,address,address,address)",
          "invest(address,uint256,uint256,bool,bool)",
          "reinvest(address,uint256,uint256)",
          "borrowAndInvest(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Helper",
            "src": "contracts/Helper.sol:29"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "Lab",
              "offset": 0,
              "slot": "0",
              "type": "t_contract(IERC20)1951",
              "contract": "Helper",
              "src": "contracts/Helper.sol:17"
            },
            {
              "label": "prLab",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IERC20)1951",
              "contract": "Helper",
              "src": "contracts/Helper.sol:19"
            },
            {
              "label": "DSD",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(IERC20)1951",
              "contract": "Helper",
              "src": "contracts/Helper.sol:21"
            },
            {
              "label": "market",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(IMarket)12156",
              "contract": "Helper",
              "src": "contracts/Helper.sol:23"
            },
            {
              "label": "bank",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(IBank)11268",
              "contract": "Helper",
              "src": "contracts/Helper.sol:25"
            },
            {
              "label": "pool",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IStakePool)12350",
              "contract": "Helper",
              "src": "contracts/Helper.sol:27"
            }
          ],
          "types": {
            "t_contract(IBank)11268": {
              "label": "contract IBank",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1951": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IMarket)12156": {
              "label": "contract IMarket",
              "numberOfBytes": "20"
            },
            "t_contract(IStakePool)12350": {
              "label": "contract IStakePool",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.12"
      },
      "contracts/InterfaceViewer.sol:InterfaceViewer": {
        "src": "contracts/InterfaceViewer.sol:9",
        "version": {
          "withMetadata": "907b443f015d6784fd055429e189078176806a011b006e2ba12ed7f8b6a09840",
          "withoutMetadata": "0f2319596dc7062964b8128dcdfb03c679bbc6c3b41d2bcc514058e3cdeaa0ae",
          "linkedWithoutMetadata": "0f2319596dc7062964b8128dcdfb03c679bbc6c3b41d2bcc514058e3cdeaa0ae"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,address,address,address,address,address,address,address,address)",
          "getTrade()",
          "getSideBar(address)",
          "getStep()",
          "getStakeAndEarn(address)",
          "getBorrowInfo(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "InterfaceViewer",
            "src": "contracts/InterfaceViewer.sol:20"
          },
          {
            "kind": "state-variable-immutable",
            "name": "market",
            "src": "contracts/InterfaceViewer.sol:10"
          },
          {
            "kind": "state-variable-immutable",
            "name": "stakePool",
            "src": "contracts/InterfaceViewer.sol:11"
          },
          {
            "kind": "state-variable-immutable",
            "name": "gla",
            "src": "contracts/InterfaceViewer.sol:12"
          },
          {
            "kind": "state-variable-immutable",
            "name": "bank",
            "src": "contracts/InterfaceViewer.sol:13"
          },
          {
            "kind": "state-variable-immutable",
            "name": "buyback",
            "src": "contracts/InterfaceViewer.sol:14"
          },
          {
            "kind": "state-variable-immutable",
            "name": "lab",
            "src": "contracts/InterfaceViewer.sol:15"
          },
          {
            "kind": "state-variable-immutable",
            "name": "prLab",
            "src": "contracts/InterfaceViewer.sol:16"
          },
          {
            "kind": "state-variable-immutable",
            "name": "dsd",
            "src": "contracts/InterfaceViewer.sol:17"
          },
          {
            "kind": "state-variable-immutable",
            "name": "usdc",
            "src": "contracts/InterfaceViewer.sol:18"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.12"
      },
      "contracts/Lab.sol:Labs": {
        "src": "contracts/Lab.sol:10",
        "version": {
          "withMetadata": "f1d4584a16d94d831dd048cd88f0f85673a05c0b5b4c2c4329c3f0ca9bfae88b",
          "withoutMetadata": "aefae743348e8fb7323ec626b9b407309c82db242307eb4a062133c30c52e865",
          "linkedWithoutMetadata": "aefae743348e8fb7323ec626b9b407309c82db242307eb4a062133c30c52e865"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "setBuyBack(address)",
          "mintForBuyBack(uint256)",
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Labs",
            "src": "contracts/Lab.sol:16"
          },
          {
            "kind": "state-variable-assignment",
            "name": "buyBackSet",
            "src": "contracts/Lab.sol:12"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "5",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "buyback",
              "offset": 0,
              "slot": "6",
              "type": "t_address",
              "contract": "Labs",
              "src": "contracts/Lab.sol:11"
            },
            {
              "label": "buyBackSet",
              "offset": 20,
              "slot": "6",
              "type": "t_bool",
              "contract": "Labs",
              "src": "contracts/Lab.sol:12"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.12"
      },
      "contracts/Market.sol:Market": {
        "src": "contracts/Market.sol:18",
        "version": {
          "withMetadata": "85d66412ccc0100973449d737b39291d9faeee5ddb825a57d8471a83014a361a",
          "withoutMetadata": "85d66412ccc0100973449d737b39291d9faeee5ddb825a57d8471a83014a361a",
          "linkedWithoutMetadata": "85d66412ccc0100973449d737b39291d9faeee5ddb825a57d8471a83014a361a"
        },
        "inherit": [
          "@openzeppelin/contracts/security/Pausable.sol:Pausable",
          "@openzeppelin/contracts/access/AccessControlEnumerable.sol:AccessControlEnumerable",
          "@openzeppelin/contracts/access/AccessControl.sol:AccessControl",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControlEnumerable.sol:IAccessControlEnumerable",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20",
          "@openzeppelin/contracts/utils/structs/EnumerableSet.sol:EnumerableSet",
          "contracts/utils/Math.sol:MathNew"
        ],
        "methods": [
          "(address,address,address,address,uint256,uint32,uint32,address,address[])",
          "startup(address,uint256,uint256)",
          "stablecoinsCanBuyLength()",
          "stablecoinsCanBuyAt(uint256)",
          "stablecoinsCanBuyContains(address)",
          "stablecoinsCanSellLength()",
          "stablecoinsCanSellAt(uint256)",
          "stablecoinsCanSellContains(address)",
          "currentFundingRatio()",
          "estimateAdjust(uint256,uint256,uint256,uint256)",
          "estimateRaisePrice()",
          "estimateRaisePrice(uint256,uint256,uint256,uint256,uint256)",
          "lowerAndAdjust()",
          "setMarketOptions(uint256,uint32,uint32)",
          "setAdjustOptions(uint32,uint32,uint32,uint32,uint32)",
          "setFeeOptions(address,uint32,uint32)",
          "estimateBuy(address,uint256)",
          "estimateRealize(uint256,address)",
          "estimateSell(uint256,address)",
          "buy(address,uint256,uint256)",
          "buyFor(address,uint256,uint256,address)",
          "realize(uint256,address,uint256)",
          "realizeFor(uint256,address,uint256,address)",
          "sell(uint256,address,uint256)",
          "sellFor(uint256,address,uint256,address)",
          "burn(uint256)",
          "burnFor(uint256,address)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Market",
            "src": "contracts/Market.sol:167"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalVolume",
            "src": "contracts/Market.sol:60"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            },
            {
              "label": "_roleMembers",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)4047_storage)",
              "contract": "AccessControlEnumerable",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:16"
            },
            {
              "label": "_paused",
              "offset": 0,
              "slot": "2",
              "type": "t_bool",
              "contract": "Pausable",
              "src": "@openzeppelin/contracts/security/Pausable.sol:28"
            },
            {
              "label": "Lab",
              "offset": 1,
              "slot": "2",
              "type": "t_contract(IERC20BurnableMinter)11529",
              "contract": "Market",
              "src": "contracts/Market.sol:26"
            },
            {
              "label": "prLab",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(IERC20BurnableMinter)11529",
              "contract": "Market",
              "src": "contracts/Market.sol:28"
            },
            {
              "label": "pool",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(IStakePool)12350",
              "contract": "Market",
              "src": "contracts/Market.sol:30"
            },
            {
              "label": "target",
              "offset": 20,
              "slot": "4",
              "type": "t_uint32",
              "contract": "Market",
              "src": "contracts/Market.sol:42"
            },
            {
              "label": "targetAdjusted",
              "offset": 24,
              "slot": "4",
              "type": "t_uint32",
              "contract": "Market",
              "src": "contracts/Market.sol:45"
            },
            {
              "label": "minTarget",
              "offset": 28,
              "slot": "4",
              "type": "t_uint32",
              "contract": "Market",
              "src": "contracts/Market.sol:47"
            },
            {
              "label": "maxTargetAdjusted",
              "offset": 0,
              "slot": "5",
              "type": "t_uint32",
              "contract": "Market",
              "src": "contracts/Market.sol:49"
            },
            {
              "label": "raiseStep",
              "offset": 4,
              "slot": "5",
              "type": "t_uint32",
              "contract": "Market",
              "src": "contracts/Market.sol:51"
            },
            {
              "label": "lowerStep",
              "offset": 8,
              "slot": "5",
              "type": "t_uint32",
              "contract": "Market",
              "src": "contracts/Market.sol:53"
            },
            {
              "label": "lowerInterval",
              "offset": 12,
              "slot": "5",
              "type": "t_uint32",
              "contract": "Market",
              "src": "contracts/Market.sol:55"
            },
            {
              "label": "latestUpdateTimestamp",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "Market",
              "src": "contracts/Market.sol:57"
            },
            {
              "label": "totalVolume",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256",
              "contract": "Market",
              "src": "contracts/Market.sol:60"
            },
            {
              "label": "dev",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "Market",
              "src": "contracts/Market.sol:63"
            },
            {
              "label": "buyFee",
              "offset": 20,
              "slot": "8",
              "type": "t_uint32",
              "contract": "Market",
              "src": "contracts/Market.sol:65"
            },
            {
              "label": "sellFee",
              "offset": 24,
              "slot": "8",
              "type": "t_uint32",
              "contract": "Market",
              "src": "contracts/Market.sol:67"
            },
            {
              "label": "k",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "Market",
              "src": "contracts/Market.sol:70"
            },
            {
              "label": "c",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "Market",
              "src": "contracts/Market.sol:72"
            },
            {
              "label": "f",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "Market",
              "src": "contracts/Market.sol:74"
            },
            {
              "label": "p",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "Market",
              "src": "contracts/Market.sol:77"
            },
            {
              "label": "w",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "Market",
              "src": "contracts/Market.sol:79"
            },
            {
              "label": "stablecoinsCanBuy",
              "offset": 0,
              "slot": "14",
              "type": "t_struct(AddressSet)4047_storage",
              "contract": "Market",
              "src": "contracts/Market.sol:92"
            },
            {
              "label": "stablecoinsCanSell",
              "offset": 0,
              "slot": "16",
              "type": "t_struct(AddressSet)4047_storage",
              "contract": "Market",
              "src": "contracts/Market.sol:94"
            },
            {
              "label": "stablecoinsDecimals",
              "offset": 0,
              "slot": "18",
              "type": "t_mapping(t_address,t_uint8)",
              "contract": "Market",
              "src": "contracts/Market.sol:96"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_contract(IERC20BurnableMinter)11529": {
              "label": "contract IERC20BurnableMinter",
              "numberOfBytes": "20"
            },
            "t_contract(IStakePool)12350": {
              "label": "contract IStakePool",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint8)": {
              "label": "mapping(address => uint8)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(AddressSet)4047_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)4047_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)3732_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)3732_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.12"
      },
      "contracts/Order.sol:DSD": {
        "src": "contracts/Order.sol:10",
        "version": {
          "withMetadata": "848b7e1f9c8195edb014ca8185be3152e9a9e5dfa194e7a26fd150b59213713c",
          "withoutMetadata": "008c02483e554d35f75ccbfc5829c63f2641d2be82628c21b981d272479b0af1",
          "linkedWithoutMetadata": "008c02483e554d35f75ccbfc5829c63f2641d2be82628c21b981d272479b0af1"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "DSD",
            "src": "contracts/Order.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "5",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.12"
      },
      "contracts/StakePool.sol:StakePool": {
        "src": "contracts/StakePool.sol:14",
        "version": {
          "withMetadata": "247a738c9e639202a36e25dfa7f9270e3464b82a49b31a9cb558c1accbc5b196",
          "withoutMetadata": "140c02bfeeaa0fe2539f7dbc2b84c98731921d4b5bc8f5bc53b2fde50c64df2d",
          "linkedWithoutMetadata": "140c02bfeeaa0fe2539f7dbc2b84c98731921d4b5bc8f5bc53b2fde50c64df2d"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol:SafeERC20"
        ],
        "methods": [
          "(address,address)",
          "setBank(address)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setOptions(uint32,uint256,address,uint32,uint32,bool)",
          "pendingRewards(uint256,address)",
          "massUpdatePools()",
          "deposit(uint256,uint256)",
          "depositFor(uint256,uint256,address)",
          "withdraw(uint256,uint256)",
          "claim(uint256)",
          "claimFor(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "StakePool",
            "src": "contracts/StakePool.sol:61"
          },
          {
            "kind": "state-variable-assignment",
            "name": "bankSet",
            "src": "contracts/StakePool.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "totalAllocPoint",
            "src": "contracts/StakePool.sol:29"
          },
          {
            "kind": "state-variable-assignment",
            "name": "mintPercentPerDay",
            "src": "contracts/StakePool.sol:32"
          },
          {
            "kind": "state-variable-assignment",
            "name": "blocksPerDay",
            "src": "contracts/StakePool.sol:34"
          },
          {
            "kind": "state-variable-assignment",
            "name": "withdrawFee",
            "src": "contracts/StakePool.sol:39"
          },
          {
            "kind": "state-variable-assignment",
            "name": "mintFee",
            "src": "contracts/StakePool.sol:41"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "bankSet",
              "offset": 20,
              "slot": "0",
              "type": "t_bool",
              "contract": "StakePool",
              "src": "contracts/StakePool.sol:17"
            },
            {
              "label": "Lab",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(IERC20)1951",
              "contract": "StakePool",
              "src": "contracts/StakePool.sol:19"
            },
            {
              "label": "prLab",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(IERC20BurnableMinter)11529",
              "contract": "StakePool",
              "src": "contracts/StakePool.sol:21"
            },
            {
              "label": "bank",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(IBank)11268",
              "contract": "StakePool",
              "src": "contracts/StakePool.sol:23"
            },
            {
              "label": "poolInfo",
              "offset": 0,
              "slot": "4",
              "type": "t_array(t_struct(PoolInfo)12171_storage)dyn_storage",
              "contract": "StakePool",
              "src": "contracts/StakePool.sol:25"
            },
            {
              "label": "userInfo",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)12176_storage))",
              "contract": "StakePool",
              "src": "contracts/StakePool.sol:27"
            },
            {
              "label": "totalAllocPoint",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256",
              "contract": "StakePool",
              "src": "contracts/StakePool.sol:29"
            },
            {
              "label": "mintPercentPerDay",
              "offset": 0,
              "slot": "7",
              "type": "t_uint32",
              "contract": "StakePool",
              "src": "contracts/StakePool.sol:32"
            },
            {
              "label": "blocksPerDay",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "StakePool",
              "src": "contracts/StakePool.sol:34"
            },
            {
              "label": "dev",
              "offset": 0,
              "slot": "9",
              "type": "t_address",
              "contract": "StakePool",
              "src": "contracts/StakePool.sol:37"
            },
            {
              "label": "withdrawFee",
              "offset": 20,
              "slot": "9",
              "type": "t_uint32",
              "contract": "StakePool",
              "src": "contracts/StakePool.sol:39"
            },
            {
              "label": "mintFee",
              "offset": 24,
              "slot": "9",
              "type": "t_uint32",
              "contract": "StakePool",
              "src": "contracts/StakePool.sol:41"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_struct(PoolInfo)12171_storage)dyn_storage": {
              "label": "struct PoolInfo[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IBank)11268": {
              "label": "contract IBank",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20)1951": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_contract(IERC20BurnableMinter)11529": {
              "label": "contract IERC20BurnableMinter",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_struct(UserInfo)12176_storage)": {
              "label": "mapping(address => struct UserInfo)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)12176_storage))": {
              "label": "mapping(uint256 => mapping(address => struct UserInfo))",
              "numberOfBytes": "32"
            },
            "t_struct(PoolInfo)12171_storage": {
              "label": "struct PoolInfo",
              "members": [
                {
                  "label": "lpToken",
                  "type": "t_contract(IERC20)1951",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "accPerShare",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(UserInfo)12176_storage": {
              "label": "struct UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint32": {
              "label": "uint32",
              "numberOfBytes": "4"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.12"
      },
      "contracts/USDC.sol:USDC": {
        "src": "contracts/USDC.sol:10",
        "version": {
          "withMetadata": "46efe829c73b0423095741f8544ecd0efeb1fb2550bc1d4215d173dfac269b00",
          "withoutMetadata": "c9b88f80433bc8981bbea174b6da6cd6e4b46b43f490960d756faaa0b25441c3",
          "linkedWithoutMetadata": "c9b88f80433bc8981bbea174b6da6cd6e4b46b43f490960d756faaa0b25441c3"
        },
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "decimals()",
          "mint(address,uint256)",
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "USDC",
            "src": "contracts/USDC.sol:14"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "5",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.12"
      },
      "contracts/Wallet.sol:teamContract": {
        "src": "contracts/Wallet.sol:8",
        "version": {
          "withMetadata": "9ecf142012abad68c92e96d6f6044d44433bb8b00a1edd107e1d2ffbc1cf8fa0",
          "withoutMetadata": "fcfc123d9beb404f0b935f5374855a5f4a8b51ca99ea879743c547b6538f2dd4",
          "linkedWithoutMetadata": "fcfc123d9beb404f0b935f5374855a5f4a8b51ca99ea879743c547b6538f2dd4"
        },
        "inherit": [
          "@openzeppelin/contracts/finance/PaymentSplitter.sol:PaymentSplitter",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "(address[],uint256[],address,address,address,address)",
          "setMarket(address)",
          "release(address,address)",
          "release(address payable)",
          "releaseAllEth()",
          "releaseAllErc20(address)",
          "releaseAllUsdc()",
          "realize()",
          "sell()",
          "buy()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "teamContract",
            "src": "contracts/Wallet.sol:24"
          },
          {
            "kind": "state-variable-immutable",
            "name": "teamLength",
            "src": "contracts/Wallet.sol:9"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_totalShares",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "PaymentSplitter",
              "src": "@openzeppelin/contracts/finance/PaymentSplitter.sol:34"
            },
            {
              "label": "_totalReleased",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "PaymentSplitter",
              "src": "@openzeppelin/contracts/finance/PaymentSplitter.sol:35"
            },
            {
              "label": "_shares",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "PaymentSplitter",
              "src": "@openzeppelin/contracts/finance/PaymentSplitter.sol:37"
            },
            {
              "label": "_released",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "PaymentSplitter",
              "src": "@openzeppelin/contracts/finance/PaymentSplitter.sol:38"
            },
            {
              "label": "_payees",
              "offset": 0,
              "slot": "4",
              "type": "t_array(t_address)dyn_storage",
              "contract": "PaymentSplitter",
              "src": "@openzeppelin/contracts/finance/PaymentSplitter.sol:39"
            },
            {
              "label": "_erc20TotalReleased",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_contract(IERC20)1951,t_uint256)",
              "contract": "PaymentSplitter",
              "src": "@openzeppelin/contracts/finance/PaymentSplitter.sol:41"
            },
            {
              "label": "_erc20Released",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_contract(IERC20)1951,t_mapping(t_address,t_uint256))",
              "contract": "PaymentSplitter",
              "src": "@openzeppelin/contracts/finance/PaymentSplitter.sol:42"
            },
            {
              "label": "dsd",
              "offset": 0,
              "slot": "7",
              "type": "t_contract(IERC20)1951",
              "contract": "teamContract",
              "src": "contracts/Wallet.sol:12"
            },
            {
              "label": "labs",
              "offset": 0,
              "slot": "8",
              "type": "t_contract(IERC20)1951",
              "contract": "teamContract",
              "src": "contracts/Wallet.sol:13"
            },
            {
              "label": "prLabs",
              "offset": 0,
              "slot": "9",
              "type": "t_contract(IERC20)1951",
              "contract": "teamContract",
              "src": "contracts/Wallet.sol:14"
            },
            {
              "label": "usdc",
              "offset": 0,
              "slot": "10",
              "type": "t_contract(IERC20)1951",
              "contract": "teamContract",
              "src": "contracts/Wallet.sol:15"
            },
            {
              "label": "market",
              "offset": 0,
              "slot": "11",
              "type": "t_address",
              "contract": "teamContract",
              "src": "contracts/Wallet.sol:16"
            },
            {
              "label": "isTeam",
              "offset": 0,
              "slot": "12",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "teamContract",
              "src": "contracts/Wallet.sol:17"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IERC20)1951": {
              "label": "contract IERC20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(IERC20)1951,t_mapping(t_address,t_uint256))": {
              "label": "mapping(contract IERC20 => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_contract(IERC20)1951,t_uint256)": {
              "label": "mapping(contract IERC20 => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.12"
      },
      "contracts/access/AccessControl.sol:AccessControl": {
        "src": "contracts/access/AccessControl.sol:49",
        "inherit": [
          "contracts/utils/introspection/ERC165.sol:ERC165",
          "contracts/utils/introspection/IERC165.sol:IERC165",
          "contracts/access/IAccessControl.sol:IAccessControl",
          "contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_roles",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)10773_storage)",
              "contract": "AccessControl",
              "src": "contracts/access/AccessControl.sol:55"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)10773_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_struct(RoleData)10773_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.12"
      },
      "contracts/access/IAccessControl.sol:IAccessControl": {
        "src": "contracts/access/IAccessControl.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "hasRole(bytes32,address)",
          "getRoleAdmin(bytes32)",
          "grantRole(bytes32,address)",
          "revokeRole(bytes32,address)",
          "renounceRole(bytes32,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.12"
      },
      "contracts/interfaces/IBank.sol:IBank": {
        "src": "contracts/interfaces/IBank.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "DSD()",
          "market()",
          "pool()",
          "helper()",
          "debt(address)",
          "dev()",
          "borrowFee()",
          "constructor1(address,address,address,address,address)",
          "setOptions(address,uint32)",
          "withdrawable(address)",
          "withdrawable(address,uint256)",
          "available(address)",
          "borrow(uint256)",
          "borrowFrom(address,uint256)",
          "repay(uint256)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.12"
      },
      "contracts/interfaces/IBonds.sol:IBonds": {
        "src": "contracts/interfaces/IBonds.sol:35",
        "inherit": [],
        "libraries": [],
        "methods": [
          "Lab()",
          "market()",
          "helper()",
          "bondsLength()",
          "bonds(uint256)",
          "userInfo(address)",
          "constructor1(address,address,address,address)",
          "estimatePendingReward(address)",
          "estimateBuy(uint256,address,uint256)",
          "buy(uint256,address,uint256,uint256)",
          "estimateClaim(address,uint256,address)",
          "claim(uint256,address)",
          "claimFor(address,uint256,address)",
          "add(uint256,uint256,uint256,uint256,uint256)",
          "stop(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.12"
      },
      "contracts/interfaces/IBuyBack.sol:IBuyBack": {
        "src": "contracts/interfaces/IBuyBack.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "dayOfBuyBack()",
          "sellLab(uint256)",
          "mixTime(string)",
          "setStable(address[])",
          "isOpenned()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.12"
      },
      "contracts/interfaces/IERC20BurnableMinter.sol:IERC20BurnableMinter": {
        "src": "contracts/interfaces/IERC20BurnableMinter.sol:7",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "mint(address,uint256)",
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.12"
      },
      "contracts/interfaces/IGLA.sol:IGLA": {
        "src": "contracts/interfaces/IGLA.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "publicOfferingEnabledAt()",
          "initAt()",
          "unlockAt()",
          "initialized()",
          "publicOfferingPrice()",
          "softCap()",
          "hardcap()",
          "publicOfferingTotalShares()",
          "publicOfferingSharesOf(address)",
          "totalCap()",
          "publicOfferingBuy(uint256)",
          "totalSupply()",
          "getPublicOfferingPrice()",
          "getTotalSupply()",
          "getPhase()",
          "initialize()",
          "estimateClaim(address)",
          "claim()",
          "estimateWithdraw(address)",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.12"
      },
      "contracts/interfaces/IHelper.sol:IHelper": {
        "src": "contracts/interfaces/IHelper.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "Lab()",
          "prLab()",
          "DSD()",
          "market()",
          "bank()",
          "pool()",
          "invest(address,uint256,uint256,bool)",
          "reinvest(address,uint256,uint256)",
          "borrowAndInvest(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.12"
      },
      "contracts/interfaces/ILabs.sol:ILabs": {
        "src": "contracts/interfaces/ILabs.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mintForBuyBack(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.12"
      },
      "contracts/interfaces/IMarket.sol:IMarket": {
        "src": "contracts/interfaces/IMarket.sol:9",
        "inherit": [
          "@openzeppelin/contracts/access/IAccessControlEnumerable.sol:IAccessControlEnumerable",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl"
        ],
        "libraries": [],
        "methods": [
          "totalVolume()",
          "paused()",
          "Lab()",
          "prLab()",
          "pool()",
          "target()",
          "targetAdjusted()",
          "minTarget()",
          "maxTargetAdjusted()",
          "raiseStep()",
          "lowerStep()",
          "lowerInterval()",
          "latestUpdateTimestamp()",
          "dev()",
          "buyFee()",
          "sellFee()",
          "k()",
          "c()",
          "f()",
          "p()",
          "w()",
          "stablecoinsDecimals(address)",
          "startup(address,uint256,uint256)",
          "stablecoinsCanBuyLength()",
          "stablecoinsCanBuyAt(uint256)",
          "stablecoinsCanBuyContains(address)",
          "stablecoinsCanSellLength()",
          "stablecoinsCanSellAt(uint256)",
          "stablecoinsCanSellContains(address)",
          "currentFundingRatio()",
          "estimateAdjust(uint256,uint256,uint256,uint256)",
          "estimateRaisePrice()",
          "estimateRaisePrice(uint256,uint256,uint256,uint256,uint256)",
          "lowerAndAdjust()",
          "setMarketOptions(uint256,uint32,uint32)",
          "setAdjustOptions(uint32,uint32,uint32,uint32,uint32)",
          "setFeeOptions(address,uint32,uint32)",
          "manageStablecoins(address,bool,bool)",
          "estimateBuy(address,uint256)",
          "estimateRealize(uint256,address)",
          "estimateSell(uint256,address)",
          "buy(address,uint256,uint256)",
          "buyFor(address,uint256,uint256,address)",
          "realize(uint256,address,uint256)",
          "realizeFor(uint256,address,uint256,address)",
          "sell(uint256,address,uint256)",
          "sellFor(uint256,address,uint256,address)",
          "burn(uint256)",
          "burnFor(uint256,address)",
          "pause()",
          "unpause()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.12"
      },
      "contracts/interfaces/IStakePool.sol:IStakePool": {
        "src": "contracts/interfaces/IStakePool.sol:36",
        "inherit": [],
        "libraries": [],
        "methods": [
          "Lab()",
          "prLab()",
          "bank()",
          "poolInfo(uint256)",
          "userInfo(uint256,address)",
          "totalAllocPoint()",
          "mintPercentPerDay()",
          "blocksPerDay()",
          "dev()",
          "withdrawFee()",
          "mintFee()",
          "constructor1(address,address,address,address)",
          "poolLength()",
          "add(uint256,address,bool)",
          "set(uint256,uint256,bool)",
          "setOptions(uint32,uint256,address,uint32,uint32,bool)",
          "pendingRewards(uint256,address)",
          "massUpdatePools()",
          "deposit(uint256,uint256)",
          "depositFor(uint256,uint256,address)",
          "withdraw(uint256,uint256)",
          "claim(uint256)",
          "claimFor(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.12"
      },
      "contracts/prCHaos.sol:prLab": {
        "src": "contracts/prCHaos.sol:10",
        "version": {
          "withMetadata": "4195cd7cfd82d5857f8dc5b5ffc7f197f67158cb622c83ee071646e5cb378db5",
          "withoutMetadata": "59b10c8ba518f8de5c4a34312ed227a8b8b282dd3e1bc5ef325894f682b54ceb",
          "linkedWithoutMetadata": "59b10c8ba518f8de5c4a34312ed227a8b8b282dd3e1bc5ef325894f682b54ceb"
        },
        "inherit": [
          "@openzeppelin/contracts/access/AccessControlEnumerable.sol:AccessControlEnumerable",
          "@openzeppelin/contracts/access/AccessControl.sol:AccessControl",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/access/IAccessControlEnumerable.sol:IAccessControlEnumerable",
          "@openzeppelin/contracts/access/IAccessControl.sol:IAccessControl",
          "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "prLab",
            "src": "contracts/prCHaos.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            },
            {
              "label": "_roles",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)",
              "contract": "AccessControl",
              "src": "@openzeppelin/contracts/access/AccessControl.sol:55"
            },
            {
              "label": "_roleMembers",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_bytes32,t_struct(AddressSet)4047_storage)",
              "contract": "AccessControlEnumerable",
              "src": "@openzeppelin/contracts/access/AccessControlEnumerable.sol:16"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
              "label": "bytes32[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_bytes32": {
              "label": "bytes32",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(AddressSet)4047_storage)": {
              "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
              "label": "mapping(bytes32 => struct AccessControl.RoleData)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_bytes32,t_uint256)": {
              "label": "mapping(bytes32 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(AddressSet)4047_storage": {
              "label": "struct EnumerableSet.AddressSet",
              "members": [
                {
                  "label": "_inner",
                  "type": "t_struct(Set)3732_storage",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(RoleData)19_storage": {
              "label": "struct AccessControl.RoleData",
              "members": [
                {
                  "label": "members",
                  "type": "t_mapping(t_address,t_bool)",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "adminRole",
                  "type": "t_bytes32",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Set)3732_storage": {
              "label": "struct EnumerableSet.Set",
              "members": [
                {
                  "label": "_values",
                  "type": "t_array(t_bytes32)dyn_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "_indexes",
                  "type": "t_mapping(t_bytes32,t_uint256)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.12"
      },
      "contracts/utils/Context.sol:Context": {
        "src": "contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.12"
      },
      "contracts/utils/Initializer.sol:Initializer": {
        "src": "contracts/utils/Initializer.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "initialized",
            "src": "contracts/utils/Initializer.sol:6"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializer",
              "src": "contracts/utils/Initializer.sol:6"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.2",
          "flat": true
        },
        "solcVersion": "0.8.12"
      },
      "contracts/utils/Math.sol:MathNew": {
        "src": "contracts/utils/Math.sol:5",
        "version": {
          "withMetadata": "925429210f8bb6df2673123b271f56d2f366d63adb63f360f82210db5cb71801",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.12"
      },
      "contracts/utils/Strings.sol:Strings": {
        "src": "contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "5ff19cf610ede43e586004b77c36faef9287133d5750a41f87dd9ba53fbb6a19",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.12"
      },
      "contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.12"
      },
      "contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false
        },
        "solcVersion": "0.8.12"
      }
    }
  ]
}