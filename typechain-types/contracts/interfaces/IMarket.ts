/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IMarketInterface extends utils.Interface {
  functions: {
    "Lab()": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "burnFor(uint256,address)": FunctionFragment;
    "buy(address,uint256,uint256)": FunctionFragment;
    "buyFee()": FunctionFragment;
    "buyFor(address,uint256,uint256,address)": FunctionFragment;
    "c()": FunctionFragment;
    "currentFundingRatio()": FunctionFragment;
    "dev()": FunctionFragment;
    "estimateAdjust(uint256,uint256,uint256,uint256)": FunctionFragment;
    "estimateBuy(address,uint256)": FunctionFragment;
    "estimateRaisePrice(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "estimateRaisePrice()": FunctionFragment;
    "estimateRealize(uint256,address)": FunctionFragment;
    "estimateSell(uint256,address)": FunctionFragment;
    "f()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "k()": FunctionFragment;
    "latestUpdateTimestamp()": FunctionFragment;
    "lowerAndAdjust()": FunctionFragment;
    "lowerInterval()": FunctionFragment;
    "lowerStep()": FunctionFragment;
    "manageStablecoins(address,bool,bool)": FunctionFragment;
    "maxTargetAdjusted()": FunctionFragment;
    "minTarget()": FunctionFragment;
    "p()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pool()": FunctionFragment;
    "prLab()": FunctionFragment;
    "raiseStep()": FunctionFragment;
    "realize(uint256,address,uint256)": FunctionFragment;
    "realizeFor(uint256,address,uint256,address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "sell(uint256,address,uint256)": FunctionFragment;
    "sellFee()": FunctionFragment;
    "sellFor(uint256,address,uint256,address)": FunctionFragment;
    "setAdjustOptions(uint32,uint32,uint32,uint32,uint32)": FunctionFragment;
    "setFeeOptions(address,uint32,uint32)": FunctionFragment;
    "setMarketOptions(uint256,uint32,uint32)": FunctionFragment;
    "stablecoinsCanBuyAt(uint256)": FunctionFragment;
    "stablecoinsCanBuyContains(address)": FunctionFragment;
    "stablecoinsCanBuyLength()": FunctionFragment;
    "stablecoinsCanSellAt(uint256)": FunctionFragment;
    "stablecoinsCanSellContains(address)": FunctionFragment;
    "stablecoinsCanSellLength()": FunctionFragment;
    "stablecoinsDecimals(address)": FunctionFragment;
    "startup(address,uint256,uint256)": FunctionFragment;
    "target()": FunctionFragment;
    "targetAdjusted()": FunctionFragment;
    "totalVolume()": FunctionFragment;
    "unpause()": FunctionFragment;
    "w()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "Lab"
      | "burn"
      | "burnFor"
      | "buy"
      | "buyFee"
      | "buyFor"
      | "c"
      | "currentFundingRatio"
      | "dev"
      | "estimateAdjust"
      | "estimateBuy"
      | "estimateRaisePrice(uint256,uint256,uint256,uint256,uint256)"
      | "estimateRaisePrice()"
      | "estimateRealize"
      | "estimateSell"
      | "f"
      | "getRoleAdmin"
      | "getRoleMember"
      | "getRoleMemberCount"
      | "grantRole"
      | "hasRole"
      | "k"
      | "latestUpdateTimestamp"
      | "lowerAndAdjust"
      | "lowerInterval"
      | "lowerStep"
      | "manageStablecoins"
      | "maxTargetAdjusted"
      | "minTarget"
      | "p"
      | "pause"
      | "paused"
      | "pool"
      | "prLab"
      | "raiseStep"
      | "realize"
      | "realizeFor"
      | "renounceRole"
      | "revokeRole"
      | "sell"
      | "sellFee"
      | "sellFor"
      | "setAdjustOptions"
      | "setFeeOptions"
      | "setMarketOptions"
      | "stablecoinsCanBuyAt"
      | "stablecoinsCanBuyContains"
      | "stablecoinsCanBuyLength"
      | "stablecoinsCanSellAt"
      | "stablecoinsCanSellContains"
      | "stablecoinsCanSellLength"
      | "stablecoinsDecimals"
      | "startup"
      | "target"
      | "targetAdjusted"
      | "totalVolume"
      | "unpause"
      | "w"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "Lab", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "burnFor",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "buyFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "buyFor",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "c", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "currentFundingRatio",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "dev", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "estimateAdjust",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateBuy",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateRaisePrice(uint256,uint256,uint256,uint256,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateRaisePrice()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "estimateRealize",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateSell",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "f", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "k", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "latestUpdateTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lowerAndAdjust",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lowerInterval",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lowerStep", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "manageStablecoins",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "maxTargetAdjusted",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "minTarget", values?: undefined): string;
  encodeFunctionData(functionFragment: "p", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "pool", values?: undefined): string;
  encodeFunctionData(functionFragment: "prLab", values?: undefined): string;
  encodeFunctionData(functionFragment: "raiseStep", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "realize",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "realizeFor",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "sell",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "sellFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sellFor",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdjustOptions",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeOptions",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketOptions",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "stablecoinsCanBuyAt",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stablecoinsCanBuyContains",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stablecoinsCanBuyLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stablecoinsCanSellAt",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stablecoinsCanSellContains",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stablecoinsCanSellLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stablecoinsDecimals",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "startup",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "target", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "targetAdjusted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalVolume",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "w", values?: undefined): string;

  decodeFunctionResult(functionFragment: "Lab", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "c", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentFundingRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dev", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "estimateAdjust",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateBuy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateRaisePrice(uint256,uint256,uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateRaisePrice()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateRealize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateSell",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "f", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "k", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "latestUpdateTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lowerAndAdjust",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lowerInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lowerStep", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "manageStablecoins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTargetAdjusted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minTarget", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "p", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "prLab", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "raiseStep", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "realize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "realizeFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sell", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sellFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sellFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAdjustOptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeOptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketOptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stablecoinsCanBuyAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stablecoinsCanBuyContains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stablecoinsCanBuyLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stablecoinsCanSellAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stablecoinsCanSellContains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stablecoinsCanSellLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stablecoinsDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startup", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "target", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "targetAdjusted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalVolume",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "w", data: BytesLike): Result;

  events: {
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface IMarket extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMarketInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    Lab(overrides?: CallOverrides): Promise<[string]>;

    burn(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    burnFor(
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buy(
      token: PromiseOrValue<string>,
      tokenWorth: PromiseOrValue<BigNumberish>,
      desired: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buyFee(overrides?: CallOverrides): Promise<[number]>;

    buyFor(
      token: PromiseOrValue<string>,
      tokenWorth: PromiseOrValue<BigNumberish>,
      desired: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    c(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentFundingRatio(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { numerator: BigNumber; denominator: BigNumber }
    >;

    dev(overrides?: CallOverrides): Promise<[string]>;

    estimateAdjust(
      _k: PromiseOrValue<BigNumberish>,
      _tar: PromiseOrValue<BigNumberish>,
      _w: PromiseOrValue<BigNumberish>,
      _t: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber] & {
        success: boolean;
        _c: BigNumber;
        _f: BigNumber;
        _p: BigNumber;
      }
    >;

    estimateBuy(
      token: PromiseOrValue<string>,
      tokenWorth: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        fee: BigNumber;
        worth1e18: BigNumber;
        newPrice: BigNumber;
      }
    >;

    "estimateRaisePrice(uint256,uint256,uint256,uint256,uint256)"(
      _f: PromiseOrValue<BigNumberish>,
      _k: PromiseOrValue<BigNumberish>,
      _p: PromiseOrValue<BigNumberish>,
      _tar: PromiseOrValue<BigNumberish>,
      _tarAdjusted: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber, BigNumber] & {
        success: boolean;
        _t: BigNumber;
        _c: BigNumber;
        _w: BigNumber;
        raisedFloorPrice: BigNumber;
      }
    >;

    "estimateRaisePrice()"(
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber, BigNumber] & {
        success: boolean;
        _t: BigNumber;
        _c: BigNumber;
        _w: BigNumber;
        raisedFloorPrice: BigNumber;
      }
    >;

    estimateRealize(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { worth1e18: BigNumber; worth: BigNumber }
    >;

    estimateSell(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        fee: BigNumber;
        worth1e18: BigNumber;
        worth: BigNumber;
        newPrice: BigNumber;
      }
    >;

    f(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    k(overrides?: CallOverrides): Promise<[BigNumber]>;

    latestUpdateTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    lowerAndAdjust(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lowerInterval(overrides?: CallOverrides): Promise<[number]>;

    lowerStep(overrides?: CallOverrides): Promise<[number]>;

    manageStablecoins(
      token: PromiseOrValue<string>,
      buyOrSell: PromiseOrValue<boolean>,
      addOrDelete: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    maxTargetAdjusted(overrides?: CallOverrides): Promise<[number]>;

    minTarget(overrides?: CallOverrides): Promise<[number]>;

    p(overrides?: CallOverrides): Promise<[BigNumber]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pool(overrides?: CallOverrides): Promise<[string]>;

    prLab(overrides?: CallOverrides): Promise<[string]>;

    raiseStep(overrides?: CallOverrides): Promise<[number]>;

    realize(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      desired: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    realizeFor(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      desired: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sell(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      desired: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sellFee(overrides?: CallOverrides): Promise<[number]>;

    sellFor(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      desired: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAdjustOptions(
      _minTarget: PromiseOrValue<BigNumberish>,
      _maxTargetAdjusted: PromiseOrValue<BigNumberish>,
      _raiseStep: PromiseOrValue<BigNumberish>,
      _lowerStep: PromiseOrValue<BigNumberish>,
      _lowerInterval: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeeOptions(
      _dev: PromiseOrValue<string>,
      _buyFee: PromiseOrValue<BigNumberish>,
      _sellFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMarketOptions(
      _k: PromiseOrValue<BigNumberish>,
      _target: PromiseOrValue<BigNumberish>,
      _targetAdjusted: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stablecoinsCanBuyAt(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    stablecoinsCanBuyContains(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    stablecoinsCanBuyLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    stablecoinsCanSellAt(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    stablecoinsCanSellContains(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    stablecoinsCanSellLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    stablecoinsDecimals(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    startup(
      _token: PromiseOrValue<string>,
      _w: PromiseOrValue<BigNumberish>,
      _t: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    target(overrides?: CallOverrides): Promise<[number]>;

    targetAdjusted(overrides?: CallOverrides): Promise<[number]>;

    totalVolume(overrides?: CallOverrides): Promise<[BigNumber]>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    w(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  Lab(overrides?: CallOverrides): Promise<string>;

  burn(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  burnFor(
    amount: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buy(
    token: PromiseOrValue<string>,
    tokenWorth: PromiseOrValue<BigNumberish>,
    desired: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buyFee(overrides?: CallOverrides): Promise<number>;

  buyFor(
    token: PromiseOrValue<string>,
    tokenWorth: PromiseOrValue<BigNumberish>,
    desired: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  c(overrides?: CallOverrides): Promise<BigNumber>;

  currentFundingRatio(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { numerator: BigNumber; denominator: BigNumber }
  >;

  dev(overrides?: CallOverrides): Promise<string>;

  estimateAdjust(
    _k: PromiseOrValue<BigNumberish>,
    _tar: PromiseOrValue<BigNumberish>,
    _w: PromiseOrValue<BigNumberish>,
    _t: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber, BigNumber] & {
      success: boolean;
      _c: BigNumber;
      _f: BigNumber;
      _p: BigNumber;
    }
  >;

  estimateBuy(
    token: PromiseOrValue<string>,
    tokenWorth: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      fee: BigNumber;
      worth1e18: BigNumber;
      newPrice: BigNumber;
    }
  >;

  "estimateRaisePrice(uint256,uint256,uint256,uint256,uint256)"(
    _f: PromiseOrValue<BigNumberish>,
    _k: PromiseOrValue<BigNumberish>,
    _p: PromiseOrValue<BigNumberish>,
    _tar: PromiseOrValue<BigNumberish>,
    _tarAdjusted: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber, BigNumber, BigNumber] & {
      success: boolean;
      _t: BigNumber;
      _c: BigNumber;
      _w: BigNumber;
      raisedFloorPrice: BigNumber;
    }
  >;

  "estimateRaisePrice()"(
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber, BigNumber, BigNumber] & {
      success: boolean;
      _t: BigNumber;
      _c: BigNumber;
      _w: BigNumber;
      raisedFloorPrice: BigNumber;
    }
  >;

  estimateRealize(
    amount: PromiseOrValue<BigNumberish>,
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { worth1e18: BigNumber; worth: BigNumber }
  >;

  estimateSell(
    amount: PromiseOrValue<BigNumberish>,
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      fee: BigNumber;
      worth1e18: BigNumber;
      worth: BigNumber;
      newPrice: BigNumber;
    }
  >;

  f(overrides?: CallOverrides): Promise<BigNumber>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMember(
    role: PromiseOrValue<BytesLike>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  k(overrides?: CallOverrides): Promise<BigNumber>;

  latestUpdateTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  lowerAndAdjust(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lowerInterval(overrides?: CallOverrides): Promise<number>;

  lowerStep(overrides?: CallOverrides): Promise<number>;

  manageStablecoins(
    token: PromiseOrValue<string>,
    buyOrSell: PromiseOrValue<boolean>,
    addOrDelete: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  maxTargetAdjusted(overrides?: CallOverrides): Promise<number>;

  minTarget(overrides?: CallOverrides): Promise<number>;

  p(overrides?: CallOverrides): Promise<BigNumber>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pool(overrides?: CallOverrides): Promise<string>;

  prLab(overrides?: CallOverrides): Promise<string>;

  raiseStep(overrides?: CallOverrides): Promise<number>;

  realize(
    amount: PromiseOrValue<BigNumberish>,
    token: PromiseOrValue<string>,
    desired: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  realizeFor(
    amount: PromiseOrValue<BigNumberish>,
    token: PromiseOrValue<string>,
    desired: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sell(
    amount: PromiseOrValue<BigNumberish>,
    token: PromiseOrValue<string>,
    desired: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sellFee(overrides?: CallOverrides): Promise<number>;

  sellFor(
    amount: PromiseOrValue<BigNumberish>,
    token: PromiseOrValue<string>,
    desired: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAdjustOptions(
    _minTarget: PromiseOrValue<BigNumberish>,
    _maxTargetAdjusted: PromiseOrValue<BigNumberish>,
    _raiseStep: PromiseOrValue<BigNumberish>,
    _lowerStep: PromiseOrValue<BigNumberish>,
    _lowerInterval: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeeOptions(
    _dev: PromiseOrValue<string>,
    _buyFee: PromiseOrValue<BigNumberish>,
    _sellFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMarketOptions(
    _k: PromiseOrValue<BigNumberish>,
    _target: PromiseOrValue<BigNumberish>,
    _targetAdjusted: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stablecoinsCanBuyAt(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  stablecoinsCanBuyContains(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  stablecoinsCanBuyLength(overrides?: CallOverrides): Promise<BigNumber>;

  stablecoinsCanSellAt(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  stablecoinsCanSellContains(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  stablecoinsCanSellLength(overrides?: CallOverrides): Promise<BigNumber>;

  stablecoinsDecimals(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  startup(
    _token: PromiseOrValue<string>,
    _w: PromiseOrValue<BigNumberish>,
    _t: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  target(overrides?: CallOverrides): Promise<number>;

  targetAdjusted(overrides?: CallOverrides): Promise<number>;

  totalVolume(overrides?: CallOverrides): Promise<BigNumber>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  w(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    Lab(overrides?: CallOverrides): Promise<string>;

    burn(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    burnFor(
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    buy(
      token: PromiseOrValue<string>,
      tokenWorth: PromiseOrValue<BigNumberish>,
      desired: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    buyFee(overrides?: CallOverrides): Promise<number>;

    buyFor(
      token: PromiseOrValue<string>,
      tokenWorth: PromiseOrValue<BigNumberish>,
      desired: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    c(overrides?: CallOverrides): Promise<BigNumber>;

    currentFundingRatio(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { numerator: BigNumber; denominator: BigNumber }
    >;

    dev(overrides?: CallOverrides): Promise<string>;

    estimateAdjust(
      _k: PromiseOrValue<BigNumberish>,
      _tar: PromiseOrValue<BigNumberish>,
      _w: PromiseOrValue<BigNumberish>,
      _t: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber] & {
        success: boolean;
        _c: BigNumber;
        _f: BigNumber;
        _p: BigNumber;
      }
    >;

    estimateBuy(
      token: PromiseOrValue<string>,
      tokenWorth: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        fee: BigNumber;
        worth1e18: BigNumber;
        newPrice: BigNumber;
      }
    >;

    "estimateRaisePrice(uint256,uint256,uint256,uint256,uint256)"(
      _f: PromiseOrValue<BigNumberish>,
      _k: PromiseOrValue<BigNumberish>,
      _p: PromiseOrValue<BigNumberish>,
      _tar: PromiseOrValue<BigNumberish>,
      _tarAdjusted: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber, BigNumber] & {
        success: boolean;
        _t: BigNumber;
        _c: BigNumber;
        _w: BigNumber;
        raisedFloorPrice: BigNumber;
      }
    >;

    "estimateRaisePrice()"(
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber, BigNumber] & {
        success: boolean;
        _t: BigNumber;
        _c: BigNumber;
        _w: BigNumber;
        raisedFloorPrice: BigNumber;
      }
    >;

    estimateRealize(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { worth1e18: BigNumber; worth: BigNumber }
    >;

    estimateSell(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        fee: BigNumber;
        worth1e18: BigNumber;
        worth: BigNumber;
        newPrice: BigNumber;
      }
    >;

    f(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    k(overrides?: CallOverrides): Promise<BigNumber>;

    latestUpdateTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    lowerAndAdjust(overrides?: CallOverrides): Promise<void>;

    lowerInterval(overrides?: CallOverrides): Promise<number>;

    lowerStep(overrides?: CallOverrides): Promise<number>;

    manageStablecoins(
      token: PromiseOrValue<string>,
      buyOrSell: PromiseOrValue<boolean>,
      addOrDelete: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    maxTargetAdjusted(overrides?: CallOverrides): Promise<number>;

    minTarget(overrides?: CallOverrides): Promise<number>;

    p(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pool(overrides?: CallOverrides): Promise<string>;

    prLab(overrides?: CallOverrides): Promise<string>;

    raiseStep(overrides?: CallOverrides): Promise<number>;

    realize(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      desired: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    realizeFor(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      desired: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    sell(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      desired: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    sellFee(overrides?: CallOverrides): Promise<number>;

    sellFor(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      desired: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    setAdjustOptions(
      _minTarget: PromiseOrValue<BigNumberish>,
      _maxTargetAdjusted: PromiseOrValue<BigNumberish>,
      _raiseStep: PromiseOrValue<BigNumberish>,
      _lowerStep: PromiseOrValue<BigNumberish>,
      _lowerInterval: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeOptions(
      _dev: PromiseOrValue<string>,
      _buyFee: PromiseOrValue<BigNumberish>,
      _sellFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMarketOptions(
      _k: PromiseOrValue<BigNumberish>,
      _target: PromiseOrValue<BigNumberish>,
      _targetAdjusted: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stablecoinsCanBuyAt(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    stablecoinsCanBuyContains(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    stablecoinsCanBuyLength(overrides?: CallOverrides): Promise<BigNumber>;

    stablecoinsCanSellAt(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    stablecoinsCanSellContains(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    stablecoinsCanSellLength(overrides?: CallOverrides): Promise<BigNumber>;

    stablecoinsDecimals(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    startup(
      _token: PromiseOrValue<string>,
      _w: PromiseOrValue<BigNumberish>,
      _t: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    target(overrides?: CallOverrides): Promise<number>;

    targetAdjusted(overrides?: CallOverrides): Promise<number>;

    totalVolume(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: CallOverrides): Promise<void>;

    w(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
  };

  estimateGas: {
    Lab(overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    burnFor(
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buy(
      token: PromiseOrValue<string>,
      tokenWorth: PromiseOrValue<BigNumberish>,
      desired: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buyFee(overrides?: CallOverrides): Promise<BigNumber>;

    buyFor(
      token: PromiseOrValue<string>,
      tokenWorth: PromiseOrValue<BigNumberish>,
      desired: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    c(overrides?: CallOverrides): Promise<BigNumber>;

    currentFundingRatio(overrides?: CallOverrides): Promise<BigNumber>;

    dev(overrides?: CallOverrides): Promise<BigNumber>;

    estimateAdjust(
      _k: PromiseOrValue<BigNumberish>,
      _tar: PromiseOrValue<BigNumberish>,
      _w: PromiseOrValue<BigNumberish>,
      _t: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateBuy(
      token: PromiseOrValue<string>,
      tokenWorth: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "estimateRaisePrice(uint256,uint256,uint256,uint256,uint256)"(
      _f: PromiseOrValue<BigNumberish>,
      _k: PromiseOrValue<BigNumberish>,
      _p: PromiseOrValue<BigNumberish>,
      _tar: PromiseOrValue<BigNumberish>,
      _tarAdjusted: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "estimateRaisePrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    estimateRealize(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateSell(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    f(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    k(overrides?: CallOverrides): Promise<BigNumber>;

    latestUpdateTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    lowerAndAdjust(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lowerInterval(overrides?: CallOverrides): Promise<BigNumber>;

    lowerStep(overrides?: CallOverrides): Promise<BigNumber>;

    manageStablecoins(
      token: PromiseOrValue<string>,
      buyOrSell: PromiseOrValue<boolean>,
      addOrDelete: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    maxTargetAdjusted(overrides?: CallOverrides): Promise<BigNumber>;

    minTarget(overrides?: CallOverrides): Promise<BigNumber>;

    p(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pool(overrides?: CallOverrides): Promise<BigNumber>;

    prLab(overrides?: CallOverrides): Promise<BigNumber>;

    raiseStep(overrides?: CallOverrides): Promise<BigNumber>;

    realize(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      desired: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    realizeFor(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      desired: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sell(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      desired: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sellFee(overrides?: CallOverrides): Promise<BigNumber>;

    sellFor(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      desired: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAdjustOptions(
      _minTarget: PromiseOrValue<BigNumberish>,
      _maxTargetAdjusted: PromiseOrValue<BigNumberish>,
      _raiseStep: PromiseOrValue<BigNumberish>,
      _lowerStep: PromiseOrValue<BigNumberish>,
      _lowerInterval: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeeOptions(
      _dev: PromiseOrValue<string>,
      _buyFee: PromiseOrValue<BigNumberish>,
      _sellFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMarketOptions(
      _k: PromiseOrValue<BigNumberish>,
      _target: PromiseOrValue<BigNumberish>,
      _targetAdjusted: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stablecoinsCanBuyAt(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stablecoinsCanBuyContains(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stablecoinsCanBuyLength(overrides?: CallOverrides): Promise<BigNumber>;

    stablecoinsCanSellAt(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stablecoinsCanSellContains(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stablecoinsCanSellLength(overrides?: CallOverrides): Promise<BigNumber>;

    stablecoinsDecimals(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    startup(
      _token: PromiseOrValue<string>,
      _w: PromiseOrValue<BigNumberish>,
      _t: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    target(overrides?: CallOverrides): Promise<BigNumber>;

    targetAdjusted(overrides?: CallOverrides): Promise<BigNumber>;

    totalVolume(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    w(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    Lab(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burn(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    burnFor(
      amount: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buy(
      token: PromiseOrValue<string>,
      tokenWorth: PromiseOrValue<BigNumberish>,
      desired: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buyFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyFor(
      token: PromiseOrValue<string>,
      tokenWorth: PromiseOrValue<BigNumberish>,
      desired: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    c(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentFundingRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dev(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    estimateAdjust(
      _k: PromiseOrValue<BigNumberish>,
      _tar: PromiseOrValue<BigNumberish>,
      _w: PromiseOrValue<BigNumberish>,
      _t: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    estimateBuy(
      token: PromiseOrValue<string>,
      tokenWorth: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "estimateRaisePrice(uint256,uint256,uint256,uint256,uint256)"(
      _f: PromiseOrValue<BigNumberish>,
      _k: PromiseOrValue<BigNumberish>,
      _p: PromiseOrValue<BigNumberish>,
      _tar: PromiseOrValue<BigNumberish>,
      _tarAdjusted: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "estimateRaisePrice()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    estimateRealize(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    estimateSell(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    f(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    k(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestUpdateTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lowerAndAdjust(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lowerInterval(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lowerStep(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    manageStablecoins(
      token: PromiseOrValue<string>,
      buyOrSell: PromiseOrValue<boolean>,
      addOrDelete: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    maxTargetAdjusted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minTarget(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    p(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prLab(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    raiseStep(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    realize(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      desired: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    realizeFor(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      desired: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sell(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      desired: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sellFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sellFor(
      amount: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      desired: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAdjustOptions(
      _minTarget: PromiseOrValue<BigNumberish>,
      _maxTargetAdjusted: PromiseOrValue<BigNumberish>,
      _raiseStep: PromiseOrValue<BigNumberish>,
      _lowerStep: PromiseOrValue<BigNumberish>,
      _lowerInterval: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeeOptions(
      _dev: PromiseOrValue<string>,
      _buyFee: PromiseOrValue<BigNumberish>,
      _sellFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMarketOptions(
      _k: PromiseOrValue<BigNumberish>,
      _target: PromiseOrValue<BigNumberish>,
      _targetAdjusted: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stablecoinsCanBuyAt(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stablecoinsCanBuyContains(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stablecoinsCanBuyLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stablecoinsCanSellAt(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stablecoinsCanSellContains(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stablecoinsCanSellLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stablecoinsDecimals(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    startup(
      _token: PromiseOrValue<string>,
      _w: PromiseOrValue<BigNumberish>,
      _t: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    target(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetAdjusted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalVolume(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    w(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
