/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Helper, HelperInterface } from "../../contracts/Helper";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_Lab",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "_prLab",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "_DSD",
        type: "address",
      },
      {
        internalType: "contract IMarket",
        name: "_market",
        type: "address",
      },
      {
        internalType: "contract IBank",
        name: "_bank",
        type: "address",
      },
      {
        internalType: "contract IStakePool",
        name: "_pool",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "DSD",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Lab",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "bank",
    outputs: [
      {
        internalType: "contract IBank",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "borrowAndInvest",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenWorth",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "desired",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "borrow",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "loop",
        type: "bool",
      },
    ],
    name: "invest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "market",
    outputs: [
      {
        internalType: "contract IMarket",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pool",
    outputs: [
      {
        internalType: "contract IStakePool",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "prLab",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "desired",
        type: "uint256",
      },
    ],
    name: "reinvest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001163380380620011638339810160408190526200003491620000c0565b600080546001600160a01b03199081166001600160a01b039889161790915560018054821696881696909617909555600280548616948716949094179093556003805485169286169290921790915560048054841691851691909117905560058054909216921691909117905562000154565b6001600160a01b0381168114620000bd57600080fd5b50565b60008060008060008060c08789031215620000da57600080fd5b8651620000e781620000a7565b6020880151909650620000fa81620000a7565b60408801519095506200010d81620000a7565b60608801519094506200012081620000a7565b60808801519093506200013381620000a7565b60a08801519092506200014681620000a7565b809150509295509295509295565b610fff80620001646000396000f3fe608060405234801561001057600080fd5b50600436106100835760003560e01c806302e2df9b146100885780630ac1ab9f146100b857806316f0115b146100cb578063174efba4146100de5780635e069d0d146100ff57806376cdb03b1461011457806380f5560514610127578063d2c27a1d1461013a578063e7d7ebd71461014d575b600080fd5b60025461009b906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b60005461009b906001600160a01b031681565b60055461009b906001600160a01b031681565b6100f16100ec366004610d41565b610160565b6040519081526020016100af565b61011261010d366004610d76565b6103bd565b005b60045461009b906001600160a01b031681565b60035461009b906001600160a01b031681565b610112610148366004610dba565b610734565b60015461009b906001600160a01b031681565b60048054604051634196aaaf60e01b815260009283926001600160a01b031691634196aaaf91610194913391889101610e17565b60408051808303816000875af11580156101b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d69190610e30565b5060025460035460405163095ea7b360e01b81529293506001600160a01b039182169263095ea7b39261020f9216908590600401610e17565b6020604051808303816000875af115801561022e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102529190610e54565b50600354600254604051638b93852560e01b81526000926001600160a01b0390811692638b938525926102919290911690869086903390600401610e78565b60408051808303816000875af11580156102af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d39190610e30565b5060005460055460405163095ea7b360e01b81529293506001600160a01b039182169263095ea7b39261030c9216908590600401610e17565b6020604051808303816000875af115801561032b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034f9190610e54565b506005546001600160a01b03166390210d7e600083336040518463ffffffff1660e01b815260040161038393929190610ea3565b600060405180830381600087803b15801561039d57600080fd5b505af11580156103b1573d6000803e3d6000fd5b50929695505050505050565b6001546001600160a01b03166323b872dd3330856040518463ffffffff1660e01b81526004016103ef93929190610ec2565b6020604051808303816000875af115801561040e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104329190610e54565b50600354604051639c66d9a960e01b8152600481018490526001600160a01b0385811660248301526000921690639c66d9a9906044016040805180830381865afa158015610484573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a89190610e30565b9150506104c76104b53390565b6001600160a01b038616903084610a7a565b60035460405163095ea7b360e01b81526001600160a01b038681169263095ea7b3926104fb92909116908590600401610e17565b6020604051808303816000875af115801561051a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053e9190610e54565b5060015460035460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392610575929116908790600401610e17565b6020604051808303816000875af1158015610594573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b89190610e54565b506003546001600160a01b031663c486752e848685336040516001600160e01b031960e087901b16815260048101949094526001600160a01b03928316602485015260448401919091521660648201526084016020604051808303816000875af115801561062a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064e9190610ee6565b5060005460055460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392610685929116908790600401610e17565b6020604051808303816000875af11580156106a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c89190610e54565b506005546001600160a01b03166390210d7e600085336040518463ffffffff1660e01b81526004016106fc93929190610ea3565b600060405180830381600087803b15801561071657600080fd5b505af115801561072a573d6000803e3d6000fd5b5050505050505050565b6107496001600160a01b038616333087610a7a565b60035460405163095ea7b360e01b81526001600160a01b038781169263095ea7b39261077d92909116908890600401610e17565b6020604051808303816000875af115801561079c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c09190610e54565b50600354604051638b93852560e01b81526000916001600160a01b031690638b938525906107f8908990899089903390600401610e78565b60408051808303816000875af1158015610816573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083a9190610e30565b5060005460055460405163095ea7b360e01b81529293506001600160a01b039182169263095ea7b3926108739216908590600401610e17565b6020604051808303816000875af1158015610892573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b69190610e54565b506005546001600160a01b03166390210d7e600083336040518463ffffffff1660e01b81526004016108ea93929190610ea3565b600060405180830381600087803b15801561090457600080fd5b505af1158015610918573d6000803e3d6000fd5b50505050600083806109275750825b156109c6576109c3670de0b6b3a7640000600360009054906101000a90046001600160a01b03166001600160a01b03166326121ff06040518163ffffffff1660e01b8152600401602060405180830381865afa15801561098b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109af9190610ee6565b6109b99085610eff565b6100ec9190610f2c565b90505b8215610a71575b670de0b6b3a7640000811115610a7157610a6a670de0b6b3a7640000600360009054906101000a90046001600160a01b03166001600160a01b03166326121ff06040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a609190610ee6565b6109b99084610eff565b90506109cd565b50505050505050565b610ad2846323b872dd60e01b858585604051602401610a9b93929190610ec2565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610ad8565b50505050565b6000610b2d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610bb49092919063ffffffff16565b805190915015610baf5780806020019051810190610b4b9190610e54565b610baf5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084015b60405180910390fd5b505050565b6060610bc38484600085610bcb565b949350505050565b606082471015610c2c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610ba6565b600080866001600160a01b03168587604051610c489190610f7a565b60006040518083038185875af1925050503d8060008114610c85576040519150601f19603f3d011682016040523d82523d6000602084013e610c8a565b606091505b5091509150610c9b87838387610ca6565b979650505050505050565b60608315610d12578251610d0b576001600160a01b0385163b610d0b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610ba6565b5081610bc3565b610bc38383815115610d275781518083602001fd5b8060405162461bcd60e51b8152600401610ba69190610f96565b600060208284031215610d5357600080fd5b5035919050565b80356001600160a01b0381168114610d7157600080fd5b919050565b600080600060608486031215610d8b57600080fd5b610d9484610d5a565b95602085013595506040909401359392505050565b8015158114610db757600080fd5b50565b600080600080600060a08688031215610dd257600080fd5b610ddb86610d5a565b945060208601359350604086013592506060860135610df981610da9565b91506080860135610e0981610da9565b809150509295509295909350565b6001600160a01b03929092168252602082015260400190565b60008060408385031215610e4357600080fd5b505080516020909101519092909150565b600060208284031215610e6657600080fd5b8151610e7181610da9565b9392505050565b6001600160a01b03948516815260208101939093526040830191909152909116606082015260800190565b92835260208301919091526001600160a01b0316604082015260600190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060208284031215610ef857600080fd5b5051919050565b6000816000190483118215151615610f2757634e487b7160e01b600052601160045260246000fd5b500290565b600082610f4957634e487b7160e01b600052601260045260246000fd5b500490565b60005b83811015610f69578181015183820152602001610f51565b83811115610ad25750506000910152565b60008251610f8c818460208701610f4e565b9190910192915050565b6020815260008251806020840152610fb5816040850160208701610f4e565b601f01601f1916919091016040019291505056fea2646970667358221220ced19fb723ad6570dd744842d106ebb99fc0e1c0b658cdfae3fbe692eeb0280c64736f6c634300080c0033";

type HelperConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: HelperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Helper__factory extends ContractFactory {
  constructor(...args: HelperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _Lab: PromiseOrValue<string>,
    _prLab: PromiseOrValue<string>,
    _DSD: PromiseOrValue<string>,
    _market: PromiseOrValue<string>,
    _bank: PromiseOrValue<string>,
    _pool: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Helper> {
    return super.deploy(
      _Lab,
      _prLab,
      _DSD,
      _market,
      _bank,
      _pool,
      overrides || {}
    ) as Promise<Helper>;
  }
  override getDeployTransaction(
    _Lab: PromiseOrValue<string>,
    _prLab: PromiseOrValue<string>,
    _DSD: PromiseOrValue<string>,
    _market: PromiseOrValue<string>,
    _bank: PromiseOrValue<string>,
    _pool: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _Lab,
      _prLab,
      _DSD,
      _market,
      _bank,
      _pool,
      overrides || {}
    );
  }
  override attach(address: string): Helper {
    return super.attach(address) as Helper;
  }
  override connect(signer: Signer): Helper__factory {
    return super.connect(signer) as Helper__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): HelperInterface {
    return new utils.Interface(_abi) as HelperInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Helper {
    return new Contract(address, _abi, signerOrProvider) as Helper;
  }
}
